=> Introduction : 
    -> Object Oriented Programming Language :
        - Supports classes, interfaces and inheritance 
        - Uses Java like syntax and acts like database stored procedures
    -> Strongly typed : 
        - Validates reference to objects at compile time
    -> Integrated with database : 
        - Provides direct access to records and their fields
    -> Enable developers to add business logics to system events, including button clicks,
       related record updates and Visualforce pages
    -> Apex code can be called through Web Service Requests and Triggers on objects. 
    -> Integrated : 
        - Provide built-in support for common Lightning Platform idioms.
    -> Easy to use : 
        - Uses syntax and semantics which are easy to use and understand.
        - Apex is based on familiar Java idioms.
    -> Data Focused : 
        - Provides transactional access to the database, allows to rollback operations.
    -> Rigorous : 
        - Strongly typed language that uses direct references to schema objects such as Objects and Fields API.
    -> Hosted : 
        - It is interpreted, executed and controlled entirely by Lightning Platform. 
    -> Multi-tenant aware : 
        - Apex runs in multi-tenant architecture / environment like rest of lightning platform 
    -> Easy to test : 
        - Apex provides built-in support for unit test creation and execution. Test results indicate how much code is convered.
    -> Versioned : 
        - One can save apex code against different versions of the API. 

=> Apex is included in : 
    - Performance edition 
    - Unlimited edition 
    - Developer edition 
    - Enterprise edition 
    - Database.com 

=> Apex use-case scenarios : 
    - Create Web and Email services 
    - Perform Complex Validation over more than one objects
    - Create complex business logics those cannot be implemented by workflows
    - Create custom logic that occurs over the entire transaction 
    - Attach custom logic to another operation, such as save a record, so that it occurs whenver the operation is executed,
      regardless it originates in UI, VF or from SOAP API 

=> *Apex Supports : 
    - Classes, Interfaces, Objects, Collections (List, Set, Mao)
    - Objects, Array notation, Expressions, Variables and Constants
    - Conditional Statements (if-else), Control Statement (for, while loop)
    - Cloud Dev - as it is stored, compiled and executed in Cloud
    - Triggers to call methods
    - Database statements to query and search data 
    - Transactions and Rollbacks 
    - The global access modifier which is more permissive than public and allows access across namespaces and applications
    - Versioning of Custom Code 

=> Development Tools : 
    - Developer Console 
    - Salesforce Extension for Visual Studio Code 
